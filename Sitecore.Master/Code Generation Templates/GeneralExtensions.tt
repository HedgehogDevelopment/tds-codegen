<#+
/// <summary>
/// Returns all elements in the collection except the last 'n'.
/// </summary>
/// <typeparam name="T"></typeparam>
/// <param name="source">The source.</param>
/// <param name="n">The number of elements to skip.</param>
/// <example> 
/// This sample shows how to call the <see cref="SkipLast"/> method.
/// <code>
///     int[] ary = new int[5]{ 1, 2, 3, 4, 5};
///     IEnumerable&lt;int&gt; results = ary.SkipLast(2);
/// </code>
/// The results variable would contain elements 1, 2, and 3.
/// </example>
/// <returns>All <typeparamref name="T"/> elements in the source collection except the last 'n'.</returns>
public static IEnumerable<T> SkipLast<T>(IEnumerable<T> source, int n)
{
    var it = source.GetEnumerator();
    bool hasRemainingItems = false;
    var cache = new Queue<T>(n + 1);

    do
    {
        if (hasRemainingItems = it.MoveNext())
        {
            cache.Enqueue(it.Current);
            if (cache.Count > n)
                yield return cache.Dequeue();
        }
    } while (hasRemainingItems);
}

/// <summary>
///     Recursively projects each nested element to an <see cref="IEnumerable{TSource}"/>
///     and flattens the resulting sequences into one sequence.
/// </summary>
/// <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
/// <param name="source">A sequence of values to project.</param>
/// <param name="recursiveSelector">A transform to apply to each element.</param>
/// <returns>
///     An <see cref="IEnumerable{TSource}"/> whose elements are the
///     result of recursively invoking the recursive transform function
///     on each element and nested element of the input sequence.
/// </returns>
public static IEnumerable<TSource> SelectRecursive<TSource>(IEnumerable<TSource> source, Func<TSource, IEnumerable<TSource>> recursiveSelector)
{
    Stack<IEnumerator<TSource>> stack = new Stack<IEnumerator<TSource>>();
    stack.Push(source.GetEnumerator());

    try
    {
        while (stack.Count > 0)
        {
            if (stack.Peek().MoveNext())
            {
                TSource current = stack.Peek().Current;

                yield return current;

                stack.Push(recursiveSelector(current).GetEnumerator());
            }
            else
            {
                stack.Pop().Dispose();
            }
        }
    }
    finally
    {
        while (stack.Count > 0)
        {
            stack.Pop().Dispose();
        }
    }
}

/// <summary>
/// Gets the value of the item in the dictionary at the specified key.
/// if the key is not found, returns an empty string.
/// </summary>
/// <param name="dictionary">The dictionary.</param>
/// <param name="key">The key.</param>
/// <remarks>This method is very useful within a T4 file to pull out a specific value of the <c>SitecoreFields</c> property.</remarks>
/// <returns>The value at the specifed entry, or "" if the key does not exist.</returns>
public static string GetValue(Dictionary<string, string> dictionary, string key)
{
    string @out;
    if (!dictionary.TryGetValue(key, out @out))
    {
        @out = "";
    }
    return @out;
}
#>